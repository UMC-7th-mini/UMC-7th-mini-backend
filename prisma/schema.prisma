generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enum 정의
enum Gender {
  MALE
  FEMALE
}

enum Mbti {
  INTJ
  INTP
  ENTJ
  ENTP
  INFJ
  INFP
  ENFJ
  ENFP
  ISTJ
  ISFJ
  ESTJ
  ESFJ
  ISTP
  ISFP
  ESTP
  ESFP
}

enum PlantStatus {
  Seed
  Germination
  Seedling
  Mature
}

enum Authority {
  ADMIN
  MANAGER
  MEMBER
}

// User 모델
model User {
  userKey            Int                  @id @default(autoincrement())
  userId             String               @unique
  userName           String
  userPassword       String
  userEmail          String
  gender             Gender
  birth              DateTime
  mbti               Mbti
  plantDicts         PlantDict[]          // 1:N 관계
  projects           ProjectInfo[]        // N:M 관계
  taskTables         TaskTable[]          // 1:N 관계
  privateCalendar    PrivateCalendar?     // 1:1 관계
  PlantDictPlantLink PlantDictPlantLink[] // N:M 관계
}

// PlantDict 모델
model PlantDict {
  dictKey    Int                  @id @default(autoincrement())
  getDate    DateTime
  getPlace   String
  userKey    Int
  user       User                 @relation(fields: [userKey], references: [userKey], onDelete: Cascade)
  plantLinks PlantDictPlantLink[]
}

// MultiTable 모델
model PlantDictPlantLink {
  linkKey          Int        @id @default(autoincrement())
  userKey          Int
  plantKey         Int
  user             User       @relation(fields: [userKey], references: [userKey], onDelete: Cascade)
  plant            Plant      @relation(fields: [plantKey], references: [plantKey], onDelete: Cascade)
  PlantDict        PlantDict? @relation(fields: [plantDictDictKey], references: [dictKey])
  plantDictDictKey Int?
}

// Plant 모델
model Plant {
  plantKey    Int                  @id @default(autoincrement())
  plantName   String
  plantStatus PlantStatus
  projects    Project[]
  plantLinks  PlantDictPlantLink[]
}

// TaskTable 모델
model TaskTable {
  taskKey         Int              @id @default(autoincrement())
  taskName        String
  taskProgress    String
  taskStartDate   DateTime
  taskEndDate     DateTime
  userKey         Int
  projectKey      Int
  projectCalendarKey Int?
  user            User             @relation(fields: [userKey], references: [userKey], onDelete: Cascade)
  project         Project          @relation(fields: [projectKey], references: [projectKey], onDelete: Cascade)
  projectCalendar ProjectCalendar? @relation(fields: [projectCalendarKey], references: [memoKey], onDelete: SetNull)
}

// ProjectCalendar 모델
model ProjectCalendar {
  memoKey         Int              @id @default(autoincrement())
  memoName        String
  calendarDate    DateTime?
  memo            String
  schedule        DateTime
  projectKey      Int
  privateCalKey   Int?
  project         Project          @relation(fields: [projectKey], references: [projectKey], onDelete: Cascade)
  privateCalendar PrivateCalendar? @relation(fields: [privateCalKey], references: [privateCalendarKey], onDelete: SetNull)
  taskTables      TaskTable[]
}

// ProjectInfo 모델
model ProjectInfo {
  projectInfoKey Int       @id @default(autoincrement())
  userKey        Int
  projectKey     Int
  importance     Boolean
  authority      Authority
  user           User      @relation(fields: [userKey], references: [userKey], onDelete: Cascade)
  project        Project   @relation(fields: [projectKey], references: [projectKey], onDelete: Cascade)
}

// PrivateCalendar 모델
model PrivateCalendar {
  privateCalendarKey Int               @id @default(autoincrement())
  userKey            Int               @unique // 수정: 1:1 관계
  memo               String
  schedule           DateTime
  user               User              @relation(fields: [userKey], references: [userKey], onDelete: Cascade)
  projectCalendars   ProjectCalendar[]
  projects           Project[]
}

// Project 모델
model Project {
  projectKey      Int              @id @default(autoincrement())
  totalPeople     Int
  totalProgress   Int
  startDate       DateTime
  endDate         DateTime
  projectName     String
  taskCount       Int
  plantKey        Int?             // 1:1 관계
  privateCalKey   Int?
  currentProgress String
  taskTables      TaskTable[]
  projectCalendars ProjectCalendar[] // 수정: 1:N 관계로 변경
  privateCalendar PrivateCalendar? @relation(fields: [privateCalKey], references: [privateCalendarKey], onDelete: SetNull)
  plant           Plant?           @relation(fields: [plantKey], references: [plantKey], onDelete: SetNull)
  projectInfos    ProjectInfo[]
}
