services: # 컨테이너의 정의
  app:
    container_name: my-umc-container
    build: # image말고 dockerfile 불러오기
      context: ./ # Dockerfile이 있는 위치 = 동일 디렉토리
    ports:
      - "3000:3000" # 호스트:컨테이너 포트 매핑
    volumes:
      - ./:/app # 현재 디렉토리를 컨테이너에 마운트
    depends_on:
      - mysql_db # app 서비스가 mysql_db 서비스에 의존 즉, mysql이 먼저 실행
    stdin_open: true # 표준 입력을 열어두어 상호작용 가능하게 만듬
    tty: true # 가상 터미널을 할당
    networks:
      - app-db
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE}

  mysql_db:
    image: mysql:latest
    container_name: my-umc-db-container
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    ports:
      - "3306:3306" # 호스트:컨테이너 포트
    volumes:
      - db:/var/lib/mysql # 데이터가 유지되도록 볼륨 마운트
    restart: unless-stopped
    networks:
      - app-db

volumes:
  db:

networks:
  app-db: # 전역적으로 네트워크를 정의함
    driver: bridge # 단일 호스트이기 때문에 각 컨테이너 격리가 가능한 기본을 선택
