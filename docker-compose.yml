services: # 컨테이너의 정의
  app:
    container_name: my-umc-container
    build: # image말고 dockerfile 불러오기
      context: ./ # Dockerfile이 있는 위치 = 동일 디렉토리
    ports:
      - "3000:3000" # 호스트:컨테이너 포트 매핑
    volumes:
      - ./:/app # 현재 디렉토리를 컨테이너에 마운트
    depends_on:
      - mysql_db # app 서비스가 mysql_db 서비스에 의존
    stdin_open: true # 표준 입력을 열어두어 상호작용 가능하게 만듬
    tty:
      true # 가상 터미널을 할당
      # 즉, ssh로 컨테이너 외부에서 입력이 가능해짐
    networks:
      - app-db
    environment:
      - DB_HOST=mysql_db # 변경된 DB 컨테이너 이름에 맞게 수정
      - DB_PORT=3306
      - DB_USER=root
      - DB_PASSWORD=rootpw
      - DB_DATABASE=db

  mysql_db: # 서비스 이름을 mysql_db로 수정
    image: mysql:latest # 최신 MySQL 이미지
    container_name: my-umc-db-container
    environment:
      - MYSQL_ROOT_PASSWORD=rootpw  # 루트 계정의 비밀번호
      - MYSQL_DATABASE=db            # 초기 생성할 데이터베이스 이름
      - MYSQL_USER=myuser            # 새로운 사용자 (root가 아닌 사용자)
      - MYSQL_PASSWORD=myuserpw      # 해당 사용자의 비밀번호
    ports:
      - "3306:3306" # 호스트:컨테이너 포트
    volumes:
      - db:/var/lib/mysql # 데이터가 유지되도록 볼륨 마운트
    restart: unless-stopped
    networks:
      - app-db

volumes:
  db:

networks:
  app-db: # 전역적으로 네트워크를 정의함
    driver: bridge # 단일 호스트이기 때문에 각 컨테이너 격리가 가능한 기본을 선택
